// Prisma configuration

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

// App Data Models

model Tag {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  spots         Spot[]
}

model Review {
  id            String    @id @default(cuid())
  comment   String?
  rating        Int
  createdAt     DateTime  @default(now())
  spot          Spot      @relation(fields:[spotId], references:[id], onDelete: Cascade)
  spotId        String    @map("spot_id")
  user          User      @relation(fields:[userId], references:[id], onDelete: Cascade)
  userId        String    @map("user_id")

  @@index([spotId])
  @@index([userId])
}

model OpeningHours {
  id            String    @id @default(cuid())
  openingTime   String
  closingTime   String
  startDate     DateTime
  endDate       DateTime
  spot          Spot      @relation(fields:[spotId], references:[id], onDelete: Cascade)
  spotId        String    @map("spot_id")

  @@index([spotId])
}

model Spot {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  latitude      Float
  longitude     Float
  tags          Tag[]
  image         String
  reviews       Review[]
  openingHours  OpeningHours[]
}


// User Authentication

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?@unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  reviews       Review[]
  sessions      Session[]
  isModerator   Boolean   @default(false)
  isAdmin       Boolean   @default(false)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}