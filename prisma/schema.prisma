generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Tag {
  id             String   @id @default(cuid())
  name           String   @unique
  description    String?
  xata_id        String   @unique(map: "Tag__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  spots          Spot[]
}

model Review {
  id             String   @id @default(cuid())
  comment        String?
  rating         Int
  createdAt      DateTime @default(now())
  spotId         String   @map("spot_id")
  userId         String   @map("user_id")
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "Review__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  spot           Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([spotId])
  @@index([userId])
}

model OpeningHours {
  id             String   @id @default(cuid())
  openingTime    String
  closingTime    String
  startDate      DateTime
  endDate        DateTime
  spotId         String   @map("spot_id")
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "OpeningHours__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  spot           Spot     @relation(fields: [spotId], references: [id], onDelete: Cascade)

  @@index([spotId])
}

model Spot {
  id             String         @id @default(cuid())
  name           String         @unique
  description    String?
  latitude       Float
  longitude      Float
  image          String
  address        String
  city           String
  country        String         @default("France")
  postalCode     String
  region         String
  website        String?
  xata_version   Int            @default(0)
  xata_createdat DateTime       @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime       @default(now()) @db.Timestamptz(6)
  xata_id        String         @unique(map: "Spot__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  tags           Tag[]
  reviews        Review[]
  openingHours   OpeningHours[]
  likedBy        User[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  xata_updatedat     DateTime @default(now()) @db.Timestamptz(6)
  xata_id            String   @unique(map: "Account__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version       Int      @default(0)
  xata_createdat     DateTime @default(now()) @db.Timestamptz(6)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id             String   @id @default(cuid())
  sessionToken   String   @unique @map("session_token")
  userId         String   @map("user_id")
  expires        DateTime
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "Session__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  isAdmin        Boolean   @default(false)
  isModerator    Boolean   @default(false)
  xata_version   Int       @default(0)
  xata_createdat DateTime  @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime  @default(now()) @db.Timestamptz(6)
  xata_id        String    @unique(map: "User__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  accounts       Account[]
  reviews        Review[]
  likedSpots     Spot[]
  sessions       Session[]
}

model VerificationToken {
  id             Int      @id @default(autoincrement())
  identifier     String
  token          String   @unique
  expires        DateTime
  xata_id        String   @unique(map: "VerificationToken__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)

  @@unique([identifier, token])
}

model SpotToTag {
  A              String
  B              String
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)
  xata_id        String   @unique(map: "_SpotToTag__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)

  @@unique([A, B], map: "_SpotToTag_AB_unique")
  @@index([B], map: "_SpotToTag_B_index")
  @@map("_SpotToTag")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model SpotToUser {
  A              String
  B              String
  xata_id        String   @unique(map: "_SpotToUser__pgroll_new_xata_id_key") @default(dbgenerated("('rec_'::text || (xata_private.xid())::text)"))
  xata_version   Int      @default(0)
  xata_createdat DateTime @default(now()) @db.Timestamptz(6)
  xata_updatedat DateTime @default(now()) @db.Timestamptz(6)

  @@unique([A, B], map: "_SpotToUser_AB_unique")
  @@index([B], map: "_SpotToUser_B_index")
  @@map("_SpotToUser")
}
